pipeline {
    agent any

    environment {
        REGISTRY_URL = "icr.io/etl-registry"
        REGION = "us-south"
        CLUSTER_NAME = "etl-cluster"
        RESOURCE_GROUP = "ETL-rg"   // change if you created custom group
        KUBE_NAMESPACE = "dev"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Login to IBM Cloud') {
            steps {
                withCredentials([string(credentialsId: 'ibm-cloud-api-key', variable: 'IBM_CLOUD_API_KEY')]) {
                    sh '''
                        ibmcloud login --apikey $IBM_CLOUD_API_KEY -r $REGION
                        ibmcloud target -g $RESOURCE_GROUP
                        ibmcloud cr login
                        ibmcloud ks cluster config --cluster $CLUSTER_NAME
                    '''
                }
            }
        }

        stage('Build and Push Images') {
            steps {
                parallel(
                    "Extract": {
                        script {
                            def imageName = "${REGISTRY_URL}/psx-etl-extract:${IMAGE_TAG}"
                            def image = docker.build(imageName, "./psx-etl/services/extract")
                            image.push()
                        }
                    },
                    "Transform": {
                        script {
                            def imageName = "${REGISTRY_URL}/psx-etl-transform:${IMAGE_TAG}"
                            def image = docker.build(imageName, "./psx-etl/services/transform")
                            image.push()
                        }
                    },
                    "Load": {
                        script {
                            def imageName = "${REGISTRY_URL}/psx-etl-load:${IMAGE_TAG}"
                            def image = docker.build(imageName, "./psx-etl/services/load")
                            image.push()
                        }
                    },
                    "Scheduler": {
                        script {
                            def imageName = "${REGISTRY_URL}/psx-etl-scheduler:${IMAGE_TAG}"
                            def image = docker.build(imageName, "./psx-etl/services/scheduler")
                            image.push()
                        }
                    },
                    "Visualization": {
                        script {
                            def imageName = "${REGISTRY_URL}/psx-etl-visualization:${IMAGE_TAG}"
                            def image = docker.build(imageName, "./psx-etl/services/visualization")
                            image.push()
                        }
                    }
                )
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh '''
                    # Replace __IMAGE_TAG__ placeholder in all deployment files
                    find ./psx-etl/infra/k8s/services -type f -name '*-deployment.yaml' \
                        -exec sed -i "s|__IMAGE_TAG__|$IMAGE_TAG|g" {} +

                    # Apply database configs to database namespace
                    kubectl apply --namespace=database -R -f psx-etl/infra/k8s/database/

                    # Apply service configs to dev namespace
                    kubectl apply -n $KUBE_NAMESPACE -R -f psx-etl/infra/k8s/services/

                    # Apply ingress to dev namespace
                    kubectl apply -n $KUBE_NAMESPACE -f psx-etl/infra/k8s/ingress.yaml
                '''
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished. Cleaning up workspace...'
            cleanWs()
        }
    }
}
